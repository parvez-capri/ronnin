// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Your Organization Name",
            "url": "http://www.yourorg.com/support",
            "email": "support@yourorg.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create-ticket": {
            "post": {
                "description": "Creates a new JIRA ticket with the provided information and persists ticket data to MongoDB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Create a new ticket",
                "parameters": [
                    {
                        "description": "Ticket creation request with URL, payload, response, and request headers",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TicketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ticket created successfully with ticket ID, status, assigned user, and Jira link",
                        "schema": {
                            "$ref": "#/definitions/models.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to create ticket",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the status of the server and all its dependencies including Jira, MongoDB, and S3 connections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "System healthy with status of all services",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "System unhealthy with details about failed services",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/report-issue": {
            "post": {
                "description": "Creates a JIRA ticket for a reported issue with screenshots (uploaded to S3 with 7-day presigned URL) and network calls data. All data is persisted to MongoDB.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Report an issue with screenshot upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Issue title",
                        "name": "issue",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Issue description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "userEmail",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Lead ID",
                        "name": "leadId",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "product",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Page URL where the issue occurred",
                        "name": "pageUrl",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Failed network calls JSON string",
                        "name": "failedNetworkCalls",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Screenshot image (will be uploaded to S3 with 7-day presigned URL)",
                        "name": "image0",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ticket created successfully with ticket ID, status, assigned user, and Jira link",
                        "schema": {
                            "$ref": "#/definitions/models.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create ticket or internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets": {
            "get": {
                "description": "Retrieves all tickets from the MongoDB database with full ticket data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Get All Tickets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.FlattenedTicket"
                            }
                        }
                    },
                    "500": {
                        "description": "Database unavailable or error retrieving tickets",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tickets/{id}": {
            "get": {
                "description": "Retrieves a single ticket by its Jira ID from MongoDB with complete ticket details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Get Ticket by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Jira Ticket ID (e.g. PROJ-123)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.FlattenedTicket"
                        }
                    },
                    "404": {
                        "description": "Ticket not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database unavailable or error retrieving ticket",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string",
                    "example": "Field 'url' is required"
                },
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "models.HealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1647123456
                }
            }
        },
        "models.TicketRequest": {
            "type": "object",
            "required": [
                "payload",
                "requestHeaders",
                "response",
                "url"
            ],
            "properties": {
                "imageS3URL": {
                    "type": "string",
                    "example": "https://bucket.s3.amazonaws.com/screenshot.png"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "requestHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "response": {
                    "type": "object",
                    "additionalProperties": true
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/api/endpoint"
                }
            }
        },
        "models.TicketResponse": {
            "type": "object",
            "properties": {
                "assignedTo": {
                    "type": "string",
                    "example": "john.doe@company.com"
                },
                "jiraLink": {
                    "type": "string",
                    "example": "https://your-jira.atlassian.net/browse/PROJECT-123"
                },
                "status": {
                    "type": "string",
                    "example": "created"
                },
                "ticketId": {
                    "type": "string",
                    "example": "PROJECT-123"
                }
            }
        },
        "services.FlattenedTicket": {
            "type": "object",
            "properties": {
                "assignedTo": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "failedNetworkCallsJSON": {
                    "description": "Store JSON strings for complex data",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imageURL": {
                    "type": "string"
                },
                "issue": {
                    "description": "Issue details",
                    "type": "string"
                },
                "jiraLink": {
                    "type": "string"
                },
                "leadID": {
                    "type": "string"
                },
                "pageURL": {
                    "type": "string"
                },
                "payloadJSON": {
                    "type": "string"
                },
                "product": {
                    "type": "string"
                },
                "requestHeadersJSON": {
                    "type": "string"
                },
                "responseJSON": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "ticketID": {
                    "type": "string"
                },
                "userEmail": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Ticket viewing endpoints - for accessing stored reports",
            "name": "tickets"
        },
        {
            "description": "Issue reporting with file uploads",
            "name": "reports"
        },
        {
            "description": "Health check and monitoring endpoints",
            "name": "health"
        }
    ],
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Ronnin API",
	Description:      "API Server for issue reporting with Jira integration, MongoDB persistence, and S3 file uploads",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
